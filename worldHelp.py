import random
import sys
import os
import math
basedir = '../../..'
sys.path.append(basedir)
from InsertMultiSym2 import getMissionLocation 
import traceback
import json


random_numbers =[] 
for i in range(8):
  random_numbers += [round(random.uniform(0, 3), 2) for _ in range(8)]
  random_numbers += [round(random.uniform(4, 10), 2) for _ in range(8)]
##random_numbers += [round(random.uniform(0, 1), 2) for _ in range(50)]
#random_numbers += [round(random.uniform(2, 4), 2) for _ in range(50)]
for i in range(8):
  random_numbers += [round(random.uniform(17, 31), 2) for _ in range(8)]
  random_numbers += [round(random.uniform(9, 19), 2) for _ in range(8)]
  
#random_numbers += [round(random.uniform(4, 6), 2) for _ in range(50)]
#random_numbers += [round(random.uniform(6, 12), 2) for _ in range(50)]
print(random_numbers)


# def read_text_file(file_path):
#     with open(file_path, "r") as file:
#         content = file.read()
#     return content.strip()


# def closestMission(coordinates):
#     missions = getMissionLocation(read_text_file(os.path.join('.', "jsonWheelShapes/ConvJsonMultiSym2.json")))
#     mission_keys = list(missions.keys())
#     closest_mission = mission_keys[0]
#     closest_distance = distanceToMission(coordinates, missions[closest_mission])
#     for key in mission_keys:
#         distance = distanceToMission(coordinates, missions[key])
#         if distance< closest_distance:
#             closest_distance = distance
#             closest_mission = key
#     return closest_mission

# def distanceToMission(coordinates, mission):
#     return math.sqrt((coordinates[0]-mission[0])**2 + (coordinates[1]-mission[1])**2)
        
# def goToMission(current_x_vector, current_y_vector, coordinates):
#     closestMission = closestMission(coordinates)
#     current_angle_radians = math.atan2(current_y_vector, current_x_vector)
#     mission_angle_radians = math.atan2(coordinates[1] - closestMission[1], coordinates[0] - closestMission[0])
#     if current_angle_radians < mission_angle_radians:
#         leftSpeed = 10.0
#         rightSpeed = -10.0
#     elif current_angle_radians > mission_angle_radians: 
#         leftSpeed = 10.0
#         rightSpeed = -10.0
#     else:
#         leftSpeed = 6.0
#         rightSpeed = 6.0

#     return leftSpeed, rightSpeed

# if __name__ == "__main__":
#     coordinates = [0,0,12]
#     print(closestMission(coordinates))



"""

  hidden rotation_1 0 -1 0 0.005136961818463078
  hidden rotation_2 -0.911674012486684 -0.29055969673539556 0.2905607640227166 4.620044039029679
  hidden rotation_3 0.9998655448810692 0.011595067313016127 -0.011595109904154776 1.570934464158391
  hidden rotation_4 0.673496207589224 -0.5226857809971327 0.522687700932737 1.9561643461459826
  hidden rotation_5 -0.9254899359369089 0.26783189829696946 -0.26783288210027195 4.635030557925152
  hidden rotation_6 -0.9152359820419329 -0.28490568690028434 0.2849067334192294 4.6239275649719245
  hidden rotation_7 0.9999762427796602 0.00487410000645694 -0.004874117910058839 1.5708237575025434
  hidden rotation_8 -0.9144342501750887 -0.28618997222036574 0.2861910234567629 4.623054657944032
  hidden rotation_9 0.9999590176985196 0.006401664718854009 -0.00640168823352471 1.5708409831412626
  hidden rotation_10 -0.9884634785686348 0.10709777605731864 -0.10709816945013871 4.700781984440695
  hidden rotation_11 0.8551990567957045 -0.3664925555218358 0.3664939017266335 1.7265869791311814
  hidden rotation_12 -0.9260506581472527 -0.26686106438536616 0.26686204462259 4.635634442434857
  hidden rotation_13 0.997534636868352 -0.049621719834573357 0.049621902105662634 1.5732684046255405
  hidden rotation_14 0.8028610117351284 -0.4215524227936593 0.4215539712450138 1.7886301829370148
  hidden rotation_15 -0.41468465720334874 -0.6434413701075443 0.6434437336040094 3.927792292766237
  rotation 0.049610266362048364 0.01647859999683021 0.9986327038574448 1.8726253854889698




"""



"""
#VRML_SIM R2023b utf8

EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023b/projects/objects/backgrounds/protos/TexturedBackground.proto"
EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023b/projects/objects/backgrounds/protos/TexturedBackgroundLight.proto"
EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023b/projects/objects/floors/protos/Floor.proto"
EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023b/projects/appearances/protos/SandyGround.proto"
EXTERNPROTO "../protos/Car4wMulti2.proto"
EXTERNPROTO "../protos/Ramp.proto"
EXTERNPROTO "../protos/Mission.proto"

WorldInfo {
  basicTimeStep 16
  contactProperties [
    ContactProperties {
      material2 "dumbbell"
    }
    ContactProperties {
      material1 "ground"
      material2 "wheel"
      coulombFriction *InsertCoulombFriction*
      rollingFriction *InsertRollingFriction* 0 0
      softCFM 1e-05
    }
    ContactProperties {
      material1 "ramp"
      material2 "wheel"
      coulombFriction .64
      rollingFriction .015 0 0
      softCFM 1e-05
    }
  ]
}
Viewpoint {
  orientation 0.32394022351376817 -0.4199954945251254 -0.8477420103831385 4.806754049841023
  position -12.628556713411646 -76.42326476661101 100.75603183242228
}
DEF ELEVATION_GRID Solid {
  translation -40 -80 0
  children [
    Shape {
      appearance SandyGround {
        textureTransform TextureTransform {
          scale 20 20
        }
      }
      geometry DEF EG ElevationGrid {
        height [3.92, 2.39, 3.24, 2.42, 2.79, 0.24, 2.7, 2.2, 0.12, 0.61, 3.78, 3.1, 1.31, 0.38, 3.76, 3.24, 1.13, 3.25, 3.63, 0.14, 3.78, 3.49, 2.4, 1.06, 1.06, 2.97, 1.15, 1.82, 1.25, 2.61, 0.24, 3.13, 1.78, 1.08, 3.72, 0.8, 1.09, 3.27, 0.8, 3.63, 2.57, 1.51, 0.82, 3.56, 0.1, 1.27, 2.14, 3.61, 0.3, 1.64, 1.37, 1.69, 3.2, 0.88, 1.11, 1.33, 1.99, 1.26, 2.49, 1.34, 2.39, 3.9, 0.81, 3.1, 0.91, 3.4, 3.86, 1.5, 0.82, 3.21, 3.19, 1.07, 3.64, 1.48, 2.52, 1.23, 2.73, 1.39, 0.03, 3.71, 2.45, 1.0, 3.12, 3.8, 2.8, 1.99, 1.85, 3.49, 1.36, 0.05, 3.93, 0.28, 0.19, 1.66, 0.97, 0.91, 1.76, 1.24, 1.96, 0.58, 1.01, 3.18, 3.14, 2.15, 3.0, 3.08, 3.35, 3.18, 2.65, 0.57, 0.52, 0.73, 0.62, 3.25, 2.51, 1.53, 2.29, 1.03, 2.91, 2.49, 2.94, 0.65, 1.08, 0.56, 2.75, 2.72, 1.17, 1.16, 0.71, 2.56, 2.14, 1.7, 0.31, 2.81, 2.29, 2.48, 2.37, 2.05, 3.41, 3.75, 0.58, 2.83, 2.54, 0.95, 3.33, 3.95, 2.87, 3.56, 2.27, 2.03, 3.53, 2.63, 1.85, 1.1, 1.02, 2.89, 3.48, 1.73, 1.87, 1.35, 2.09, 2.27, 3.48, 0.84, 2.43, 3.56, 2.11, 2.43, 2.59, 1.52, 3.99, 0.53, 0.85, 3.42, 1.42, 1.97, 3.28, 3.13, 3.47, 2.12, 3.85, 2.66, 2.82, 2.08, 2.59, 1.74, 2.59, 3.73, 3.56, 1.67, 0.52, 3.56, 0.9, 0.59, 0.39, 1.43, 0.69, 3.75, 1.01, 3.13, 2.69, 1.31, 3.29, 2.27, 0.04, 1.35, 0.26, 2.13, 0.13, 3.36, 2.26, 1.84, 0.4, 3.59, 3.48, 2.31, 2.06, 0.12, 1.3, 1.15, 1.65, 2.48, 3.43, 0.4, 2.42, 0.33, 1.17, 2.48, 2.55, 3.99, 3.29, 3.15, 1.71, 1.28, 3.55, 2.5, 1.07, 2.59, 0.04, 0.27, 0.59, 0.35, 2.89, 2.21, 3.07, 2.45, 1.05, 0.58, 0.18, 1.98, 2.02, 1.8, 2.19, 0.19, 2.47, 3.29, 1.26, 3.0, 3.43, 0.32, 0.5, 0.94, 0.56, 3.42, 3.58, 3.63, 3.92, 1.68, 1.5, 2.17, 1.84, 2.12, 1.46, 3.4, 1.31, 0.84, 0.37, 1.47, 1.87, 0.83, 0.01, 2.14, 1.4, 0.03, 1.94, 1.93, 3.48, 0.61, 0.71, 1.21, 1.23, 2.47, 0.31, 0.96, 3.01, 2.36, 1.34, 2.34, 3.18, 3.05, 3.35, 2.35, 3.07, 1.41, 2.93, 1.61, 0.84, 1.12, 3.74, 1.9, 2.73, 2.45, 3.35, 3.92, 0.53, 1.43, 1.29, 3.85, 1.96, 3.28, 3.66, 0.81, 1.22, 3.98, 0.75, 3.02, 1.87, 2.43, 3.05, 1.68, 1.3, 1.06, 3.36, 3.08, 0.31, 3.29, 1.45, 1.4, 1.5, 2.61, 0.69, 3.57, 1.27, 1.51, 2.24, 1.45, 1.19, 3.03, 2.49, 1.2, 2.41, 2.6, 0.65, 3.66, 0.09, 1.24, 0.12, 2.64, 2.74, 0.86, 1.05, 2.33, 1.54, 1.62, 1.65, 2.12, 3.37, 2.43, 2.12, 0.31, 2.6, 2.33, 0.34, 2.82, 0.16, 1.59, 1.07, 0.91, 2.47, 0.98, 3.57, 2.1, 1.17, 2.38, 1.28, 2.68, 1.11, 1.98, 0.39, 0.93, 3.24, 0.97, 0.42, 2.52, 2.48, 2.81, 3.64, 0.23, 1.88, 3.39, 0.15, 2.53, 2.9, 0.98, 1.61, 2.48, 1.88, 2.39, 2.35, 1.22, 2.86, 1.48, 3.2, 3.85, 3.68, 1.34, 0.51, 0.16, 3.32, 3.16, 0.04, 3.21, 0.0, 2.27, 0.01, 2.27, 2.19, 0.84, 0.91, 0.61, 3.46, 1.12, 0.8, 0.64, 3.52, 1.58, 1.29, 1.68, 3.64, 3.11, 0.52, 2.2, 2.42, 1.47, 3.81, 1.51, 1.11, 2.18, 0.79, 1.73, 2.4, 1.74, 3.11, 0.83, 2.03, 3.8, 1.82, 0.85, 2.54, 2.22, 1.32, 2.34, 1.59, 3.16, 2.99, 2.75, 2.0, 1.35, 1.56, 2.74, 0.28, 0.59, 1.99, 0.06, 1.39, 3.71, 0.78, 1.69, 0.73, 2.25, 2.66,0.07, 0.01, 0.0, 0.04, 0.09, 0.08, 0.01, 0.02, 0.03, 0.07, 0.09, 0.07, 0.06, 0.06, 0.0, 0.06, 0.02, 0.02, 0.02, 0.08, 0.03, 0.08, 0.08, 0.04, 0.07, 0.03, 0.01, 0.09, 0.03, 0.0, 0.03, 0.02, 0.02, 0.09, 0.04, 0.09, 0.06, 0.04, 0.03, 0.04, 0.01, 0.03, 0.02, 0.02, 0.06, 0.03, 0.0, 0.08, 0.06, 0.06, 0.0, 0.01, 0.05, 0.0, 0.06, 0.01, 0.04, 0.04, 0.07, 0.09, 0.0, 0.06, 0.03, 0.05, 0.08, 0.05, 0.04, 0.05, 0.08, 0.03, 0.03, 0.09, 0.05, 0.05, 0.03, 0.03, 0.04, 0.04, 0.02, 0.08, 0.04, 0.08, 0.08, 0.05, 0.03, 0.08, 0.0, 0.02, 0.06, 0.04, 0.0, 0.01, 0.09, 0.05, 0.06, 0.02, 0.04, 0.03, 0.05, 0.07,0.07, 0.01, 0.0, 0.04, 0.09, 0.08, 0.01, 0.02, 0.03, 0.07, 0.09, 0.07, 0.06, 0.06, 0.0, 0.06, 0.02, 0.02, 0.02, 0.08, 0.03, 0.08, 0.08, 0.04, 0.07, 0.03, 0.01, 0.09, 0.03, 0.0, 0.03, 0.02, 0.02, 0.09, 0.04, 0.09, 0.06, 0.04, 0.03, 0.04, 0.01, 0.03, 0.02, 0.02, 0.06, 0.03, 0.0, 0.08, 0.06, 0.06, 0.0, 0.01, 0.05, 0.0, 0.06, 0.01, 0.04, 0.04, 0.07, 0.09, 0.0, 0.06, 0.03, 0.05, 0.08, 0.05, 0.04, 0.05, 0.08, 0.03, 0.03, 0.09, 0.05, 0.05, 0.03, 0.03, 0.04, 0.04, 0.02, 0.08, 0.04, 0.08, 0.08, 0.05, 0.03, 0.08, 0.0, 0.02, 0.06, 0.04, 0.0, 0.01, 0.09, 0.05, 0.06, 0.02, 0.04, 0.03, 0.05, 0.07,0.07, 0.01, 0.0, 0.04, 0.09, 0.08, 0.01, 0.02, 0.03, 0.07, 0.09, 0.07, 0.06, 0.06, 0.0, 0.06, 0.02, 0.02, 0.02, 0.08, 0.03, 0.08, 0.08, 0.04, 0.07, 0.03, 0.01, 0.09, 0.03, 0.0, 0.03, 0.02, 0.02, 0.09, 0.04, 0.09, 0.06, 0.04, 0.03, 0.04, 0.01, 0.03, 0.02, 0.02, 0.06, 0.03, 0.0, 0.08, 0.06, 0.06, 0.0, 0.01, 0.05, 0.0, 0.06, 0.01, 0.04, 0.04, 0.07, 0.09, 0.0, 0.06, 0.03, 0.05, 0.08, 0.05, 0.04, 0.05, 0.08, 0.03, 0.03, 0.09, 0.05, 0.05, 0.03, 0.03, 0.04, 0.04, 0.02, 0.08, 0.04, 0.08, 0.08, 0.05, 0.03, 0.08, 0.0, 0.02, 0.06, 0.04, 0.0, 0.01, 0.09, 0.05, 0.06, 0.02, 0.04, 0.03, 0.05, 0.07, 0.57, 0.21, 2.78, 2.16, 3.95, 2.98, 3.05, 1.96, 0.57, 3.37, 2.54, 0.63, 1.58, 0.95, 2.49, 1.61, 2.87, 2.62, 1.27, 3.39, 3.65, 1.33, 0.99, 0.27, 3.65, 1.52, 0.3, 3.67, 0.6, 2.09, 3.23, 2.62, 3.48, 3.86, 0.35, 3.01, 0.52, 0.73, 1.9, 0.26, 2.6, 2.74, 0.67, 0.25, 3.24, 2.73, 0.38, 1.11, 2.77, 3.62, 1.31, 0.82, 2.58, 1.09, 3.5, 0.48, 2.34, 3.35, 2.6, 0.92, 1.87, 0.67, 3.74, 1.22, 1.43, 1.33, 1.3, 3.71, 3.55, 0.32, 0.22, 3.2, 1.97, 0.37, 2.87, 2.3, 2.86, 2.9, 0.91, 3.05, 3.34, 3.71, 1.86, 3.03, 3.06, 2.59, 3.65, 2.09, 2.27, 1.27, 0.09, 3.05, 3.36, 2.8, 0.51, 1.35, 3.76, 0.23, 1.61, 3.61, 1.14, 0.7, 0.29, 0.72, 3.27, 1.41, 1.35, 3.04, 0.65, 1.98, 2.51, 1.74, 0.38, 2.7, 0.94, 3.08, 3.65, 1.0, 3.68, 0.04, 2.48, 0.85, 2.11, 1.21, 0.41, 0.95, 1.1, 1.97, 3.92, 0.22, 2.46, 1.85, 3.31, 2.34, 0.44, 1.77, 3.9, 0.86, 2.29, 0.05, 0.99, 1.76, 3.58, 1.02, 1.68, 1.8, 2.63, 1.23, 1.02, 3.92, 2.32, 3.36, 2.61, 3.96, 0.27, 3.87, 0.02, 1.48, 2.84, 3.42, 1.07, 0.78, 3.69, 2.54, 3.46, 3.51, 1.97, 2.7, 1.13, 1.69, 3.16, 1.6, 2.24, 3.5, 2.63, 3.64, 3.81, 1.06, 1.53, 3.47, 0.72, 1.76, 3.57, 1.95, 3.8, 0.93, 2.44, 0.06, 0.55, 2.82, 2.19, 0.64, 0.19, 2.49, 2.84, 2.03, 2.19, 0.21, 3.28, 3.08, 0.78, 3.65, 2.63, 2.45, 0.9, 0.78, 3.0, 2.99, 0.42, 0.25, 3.96, 2.19, 0.35, 1.89, 3.51, 0.29, 3.76, 2.55, 3.25, 1.91, 3.28, 0.48, 1.4, 0.75, 0.85, 2.4, 0.04, 0.94, 3.55, 3.38, 1.02, 0.72, 2.18, 1.62, 2.94, 1.29, 0.44, 3.03, 1.08, 1.9, 1.56, 0.99, 2.38, 1.04, 0.29, 2.51, 0.53, 3.29, 0.03, 1.29, 2.17, 0.76, 1.32, 0.18, 1.9, 2.13, 3.57, 3.36, 2.79, 2.67, 1.88, 1.88, 3.96, 3.4, 3.21, 0.71, 3.57, 2.53, 2.36, 3.51, 2.4, 1.48, 1.63, 1.26, 0.01, 0.59, 1.99, 3.77, 3.93, 2.48, 0.84, 1.83, 1.85, 2.3, 1.85, 2.94, 1.74, 0.92, 2.8, 2.12, 1.43, 1.9, 1.61, 3.82, 1.92, 1.91, 1.83, 2.54, 0.3, 0.06, 0.89, 0.45, 3.7, 2.68, 2.98, 1.21, 1.59, 1.0, 2.03, 3.79, 2.79, 2.84, 1.4, 1.5, 2.94, 2.36, 0.92, 3.65, 2.27, 1.21, 3.81, 0.61, 2.61, 2.82, 1.28, 3.03, 3.84, 0.13, 3.11, 1.12, 1.9, 2.1, 1.66, 2.99, 1.72, 1.03, 3.09, 2.06, 3.35, 1.5, 2.1, 1.58, 0.96, 3.85, 2.79, 2.31, 0.57, 3.24, 1.08, 3.18, 3.39, 1.58, 0.27, 3.65, 0.52, 2.35, 2.89, 3.36, 0.97, 2.23, 1.37, 2.04, 3.58, 2.04, 0.7, 3.64, 2.93, 0.77, 3.03, 1.7, 1.13, 3.75, 1.33, 0.28, 2.18, 0.07, 3.31, 3.16, 2.27, 2.42, 3.31, 0.12, 1.59, 1.2, 1.47, 1.24, 0.83, 3.54, 0.79, 0.78, 1.24, 0.77, 0.25, 3.88, 3.51, 1.52, 2.63, 0.71, 2.55, 0.74, 3.13, 3.63, 2.83, 2.33, 2.73, 3.75, 1.77, 1.68, 2.83, 1.15, 3.11, 0.33, 2.64, 3.96, 3.87, 1.38, 2.1, 2.55, 0.73, 3.04, 3.22, 0.43, 0.37, 0.01, 3.77, 0.44, 1.36, 1.5, 0.47, 2.02, 1.13, 2.97, 3.91, 3.94, 1.81, 3.86, 2.31, 0.86, 3.8, 3.77, 3.55, 2.54, 0.35, 3.45, 1.83, 2.98, 3.38, 0.08, 1.29, 0.68, 0.56, 0.92, 2.45, 1.12, 0.03, 1.63, 1.17, 1.31, 2.31, 0.41, 3.93, 0.9, 3.65, 3.89, 0.83, 3.03, 0.96, 2.98, 2.07, 1.1, 1.31, 3.6, 1.2, 1.2, 3.54, 3.29, 3.49, 0.15, 2.23, 2.35, 3.22, 0.91, 2.52, 1.11, 0.12, 2.5, 1.71, 3.45, 2.6, 0.97, 0.75, 1.68, 0.63, 3.15, 0.34, 2.75, 3.48, 2.01, 0.32, 3.58, 1.94, 1.26, 3.01, 0.35, 2.52, 3.4, 3.8, 4.0, 2.95, 0.24, 1.75, 0.31, 1.64, 2.57, 1.47, 3.87, 2.24, 1.51, 2.17]
        xDimension 30
        xSpacing 7.8125
        yDimension 30
        ySpacing 7.8125
        thickness 20
      }
    }
  ]
  contactMaterial "ground"
  boundingObject USE EG
  locked TRUE
}
TexturedBackground {
}
TexturedBackgroundLight {
}
Floor {
  contactMaterial "floor2"
  size 1 1
}
Car4wMulti2 {
  translation 25 0 12
}
Ramp {
  translation 25 0 0
}
**Missions**




"""